name: release

on:
  push:
    tags:
      - "v*.*.*"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  IS_NIGHTLY: ${{ github.event_name == 'schedule' }}

jobs:
  prepare:
    name: check
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog}}
    steps:
      - name: Checkout conflux
        uses: actions/checkout@v4
        with:
          repository: "Conflux-Chain/conflux-rust"
          fetch-depth: 0

      - name: print latest_commit
        run: echo $(git rev-parse HEAD)

      - id: should_run
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: |
          if [ -z "$(git rev-list --after='24 hours' HEAD)" ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - id: release_info
        run: |
          if [[ $IS_NIGHTLY ]]; then
            echo "tag_name=nightly-$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "release_name=Nightly ($(date '+%Y-%m-%d'))" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
      - name: Create build nightly tag
        if: ${{steps.should_run.outputs.should_run == 'true'}}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.release_info.outputs.tag_name }}",
              sha: context.sha
            })
      - name: build changelog
        id: build_changelog
        run: |
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          git log --since="24 hours ago" --pretty=format:"\`%h\` %<(12)%ar %s [%an]%n" --reverse >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
  build:
    needs: [prepare]
    if: ${{ needs.prepare.outputs.should_run != 'false' }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            name: x86_64-apple-darwin
            build: RUSTFLAGS="-L $(brew --prefix bzip2)/lib -l bz2"  cargo build --bin conflux --release --target x86_64-apple-darwin

          - host: macos-15
            target: aarch64-apple-darwin
            name: aarch64-apple-darwin
            build: RUSTFLAGS="-L $(brew --prefix bzip2)/lib -l bz2" cargo build --bin conflux --release --target aarch64-apple-darwin

          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: x86_64-unknown-linux-gnu-glibc2.31
            # build: cross build --bin conflux --release --target x86_64-unknown-linux-gnu
            build: cargo build --bin conflux --release --target x86_64-unknown-linux-gnu

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            name: x86_64-pc-windows-msvc
            build: cargo build --bin conflux --release --target x86_64-pc-windows-msvc

    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout conflux
        uses: actions/checkout@v4
        with:
          repository: "Conflux-Chain/conflux-rust"
          fetch-depth: 0
          path: conflux

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      # - name: Install cross
      #   if: ${{matrix.settings.host == 'ubuntu-latest'}}
      #   run: cargo install cross --git https://github.com/cross-rs/cross

      # - name: Copy cross file
      #   if: ${{matrix.settings.host == 'ubuntu-latest'}}
      #   run: |
      #     cp ./Cross.toml ./conflux/Cross.toml
      #     cp ./x86_64-unknown-linux-gnu ./conflux/x86_64-unknown-linux-gnu

      - name: Install macos dependencies
        if: contains(matrix.settings.host, 'macos')
        run: |
          # brew update
          brew install bzip2 # cmake pkg-config openssl llvm

      - name: Install windows dependencies
        if: ${{matrix.settings.host == 'windows-latest'}}
        run: |
          choco install llvm visualstudio-installer visualstudio2017-workload-vctools visualstudio2017buildtools-y
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      - name: Install linux dependencies
        if: contains(matrix.settings.host, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get update && apt-get install curl lsb-release wget software-properties-common gnupg -y
          sudo wget https://apt.llvm.org/llvm.sh && chmod u+x llvm.sh && sudo ./llvm.sh 18
          sudo apt-get install -y libsqlite3-dev pkg-config libssl-dev cmake libc++-18-dev git curl unzip

      - name: Build
        shell: bash
        run: |
          cd conflux
          ${{ matrix.settings.build }}

      - name: copy config
        run: |
          cp -r conflux/run ./artifact
          cp -r ./pos_config ./artifact

      - name: copy conflux
        if: ${{matrix.settings.host == 'windows-latest'}}
        run: cp conflux/target/${{matrix.settings.target}}/release/conflux.exe ./artifact/conflux.exe

      - name: copy conflux
        if: ${{matrix.settings.host != 'windows-latest'}}
        run: cp conflux/target/${{matrix.settings.target}}/release/conflux ./artifact/conflux

      - name: compress
        run: |
          cd ./artifact
          tar -zcvf conflux-${{ matrix.settings.name }}.tar.gz ./*

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Configure GPG and create artifacts
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab ./artifact/conflux-${{ matrix.settings.name }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: conflux-${{ matrix.settings.name }}.tar.gz
          path: |
            ./artifact/conflux-${{ matrix.settings.name }}.tar.gz
          if-no-files-found: error
      - name: Upload signature
        uses: actions/upload-artifact@v4
        with:
          name: conflux-${{ matrix.settings.name }}.tar.gz.asc
          path: |
            ./artifact/conflux-${{ matrix.settings.name }}.tar.gz.asc
          if-no-files-found: error

  release:
    needs: [build, prepare]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name}}
          body: ${{ needs.prepare.outputs.changelog }}
          files: artifacts/*
